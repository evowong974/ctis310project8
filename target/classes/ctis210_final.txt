Evan Wong
Professor Whitnell
CTIS 219 001:
Intro to Computer Programming Spring 2023
17 April 2023
"Final project – Description and Challenges"
Description functions and use of the program:
My final project called the “Student Registration Evaluation” form, which is an extension of the work we have done in class with student point evaluation to prioritize student registration. Extensions include pre-existing class with additional functionality from lab 9’s program including random generator for student id, scanner, and new methods within the class program. For illustration, getters are used to get or return a value to the instance variable, setters, that sets a value to the instance variable. Then, constructors are used to initialize instance variables of a newly constructed object in the driver program. Additionally, the program incorporates: attributes that are assigned to the Student public class, new conditional and logical statements using Boolean expression to evaluate student information, new GUI objects such as JFrame, Jpanel, JLabel, JTextField, and JButton, and GUI actions that executes specific events to display student data in TextArea, append new student data and point calculation to a “NewStudent.txt” file, sending/converting student data as text and changing color of jLabels, resetting data entry to original, and closing the program with a button.
The purpose of the program is to help address concerns about too much competition during registration, reduce congesting school network and Server resources, and allow students who need to meet class requirements for graduation while keeping it as fair as possible. For illustration, the algorithm should allow graduating students priority to register for classes to meet graduation requirements, enable athletes to register for classes that work around the constraints of their sports activities, and allow disabled students who may need assistance time to write. Therefore, to help avoid too much competition while allowing students to register promptly, the algorithm constructed in the method "calculate points ()" in "Student.java." For illustration, if I applied this method to the 18,357 students in the "AllStudents.txt" file in Lab 9, it would allow around 3.00% students out of the 18,357 students with more than 20 points to have high-priority registration at the beginning of registration. Consequently, this will still allow all students to register for classes but at different times and enable them the opportunity to register for courses while working around individual student constraints.
●	The “calculatePoints()” rules are:
●	 That governs how to assign points to evaluate priority for students in the registration process consists of:
●	Points assigned for the Graduation year based on (NEGATIVE Expected Graduation Year) Plus (Current Year) + 5. Early College [EC] only gains 1pt
●	Next, if a student has a disability, they are assigned 3 points automatically. Otherwise, they receive no additional issues. [Relevant Student Data]
●	Then, If the Student is studying abroad or came from a study abroad program outside of Guilford, they automatically get the maximum number of points.
●	Next, if a student is an active student-athlete, they gain 1 point. Then, if the Student has completed 56 credits or more, they are given two additional points.
●	Finally, each Student is rewarded points based on the amount of credit/credit hours that the Student earned either in school or transferred in, with 20 credits.
Directions to use the "Student Evaluation Registration" form program:
●	Note: after each jTextField entry, the user must click enter to trigger the action performed and all sections completed before clicking on the "Submit" Button.
1. Enter the Student's first and last name in the text field and click enter. By clicking enter, it will send the text to the jLabel in the format of Upper case for the first letter of the first name and Upper case for the first letter of the last name and change the color of the jLabel.
2. Then, click on the "Click to Obtain StudentID" button to trigger the random number generator algorithm to generate a random student ID number with eight digits limited to 1000000 in the JTextField.
3. Next, enter "Guilford Credits" and click enter to convert the number to text to update the jLabel text and jLabel background color.
4. Then, enter "Transfer Credits, and click enter to convert the number to text to update the jLabel text and jLabel background color
5. Next, enter "Exam Credits, and click enter to convert the number to text to update the jLabel text and jLabel background color.
6. Then, if studying away, click on the check box to send the text "true" to the JTextField and change the JTextField color to blue; otherwise, leave uncheck for false.
7. Next, if "Student Athlete," click on the checkbox to send the text "true" to the JTextField and change the JTextField color to blue; otherwise, leave uncheck for false.
8. Then, if "In Season," click on the checkbox to send the text "true," to the JTextField and change the JTextField color to blue; otherwise, leave it unchecked for "false."
9. Next, enter "Student GPA," and click enter to convert the number to text to update the jLabel text and jLabel background color.
10. Then, for the "Athletic Team Select:" section, if playing a sport, click on the drop-down menu and select a sport for men or women; otherwise, leave "none."
11. Next, for "Student Disability," if a student has a disability, click on the checkbox to send the text, "true," to the JTextField and change the JTextField color to blue; otherwise, leave it unchecked for "false."
12. Next, enter "Graduation Year" and click enter to convert the number to text to update the jLabel text and jLabel background color.
13. Then, for "Early College," if in early college, click on the checkbox to send the text, "true," to the JTextField and change the JTextField color to blue, otherwise, leave it unchecked for "false."
15. Next, click the "Submit" button to accept all data entered/selected. "Submit" will send text data entered using the "toSubmitString()" and "calculatePoints()" methods constructed on "Student.java" to the TextArea field. Also, the StudentID will display with the “G” pre-fix format. You can scroll to view all the data entered/selected and points calculated. Also, the button will append the data displayed in the TextArea to the "NewStudent.txt" file. To confirm new data entry, click on the "NewStudent.txt" file in the project.
16. Then, to enter and append more student data for evaluation, click on the "Clear" button to reset the data entered/selected back to the original text.
17. Finally, once done with making entries in the program, click the "Close" button to close out of the program.
Challenges encountered in writing the program:
Some challenges that I encountered in the program included keeping the algorithm as fair as possible while trying to address concerns with too much competition during registration, reducing congesting school network and Server resources, preventing "hardly anyone registering at the beginning of the registration period," and allowing students who need to meet class requirements for graduation. Also, I struggled with the initial development of the program and syntax errors during the construction of the student ID random generator and formatting, "Submit" button performs multiple functions, which include sending data entered/selected to display on a TextArea with the scrolling feature, calculating points, and appending the entered/selected data to a "NewStudent.txt" file" that can be viewed by clicking on the file in the project, and the "Clear" button which resets all the jLabel text back to the original text so that the user can continue to enter more student information, point calculation, and append the information in the text file. However, to help work through the challenges, I asked the professor, referred to the professor's videos, our class textbook, class notes, Java libraries, Netbeans tip, and online resources such as https://netbeans.apache.org, https://docs.oracle.com, www.codejava.net. Consequently, the program may not be a perfect solution for everyone; however, it is as close to fairness as I can think of because, in the end, all students will have the opportunity to register for classes on time without too much competition and network/resource congestion.

